angular.module("isis.ui.demoApp.templates", []).run(["$templateCache", function($templateCache) {$templateCache.put("/library/contextmenu/docs/demo.html","<script type=\"text/ng-template\" id=\"contextmenu-custom-content.html\">\n    <div class=\"custom-content\" style=\"border:1px solid rgba(0,0,0,.15); padding: 1ex; background-color: #fff;\">\n        <div>\n            <button class=\"btn btn-default btn-sm pull-right\" ng-click=\"contextmenuData.closeClick()\">Close this <i class=\"glyphicon glyphicon-remove-sign\"></i></button>\n        </div>\n        <div class=\"clearfix\"></div>\n        <div>\n            <p>That you now the result of this equation?</p>\n            <label>2 + 2 = </label><input ng-model=\"parameter.value\" min=\"0\" max=\"99\" required ng-change=\"isValid()\"/>\n            <span ng-if=\"parameter.invalid\" class=\"label label-danger\">This can not be true!</span>\n        </div>\n    </div>\n</script>\n\n<div data-ng-controller=\"ContextmenuDemoController\">\n    <p>Test context-menus here:</p>\n    <button class=\"btn btn-default\"\n            contextmenu=\"preContextMenu($event)\"\n            isis-contextmenu\n            contextmenu-data=\"menuData\">\n        Contextmenu default (right-click)</button>\n    <p></p>\n    <button class=\"btn btn-default\"\n            contextmenu=\"preContextMenu($event)\"\n            isis-contextmenu\n            contextmenu-data=\"menuData\"\n            contextmenu-config=\"menuConfig1\">\n        Contextmenu on click, positioned to left-right</button>\n    <p></p>\n    <button class=\"btn btn-default\"\n            contextmenu=\"preContextMenu($event)\"\n            isis-contextmenu\n            contextmenu-data=\"customData\"\n            contextmenu-config=\"menuConfig2\">\n            Custom content, appears on mouseover, positioned to left-right</button>\n</div>");
$templateCache.put("/library/dropdownNavigator/docs/demo.html","<div style=\"height: 220px;\" data-ng-controller=\"DropdownDemoController\">\n    <div style=\"background-color: #222;\">\n        <dropdown-navigator data-navigator=\"navigator\"></dropdown-navigator>\n    </div>\n</div>");
$templateCache.put("/library/hierarchicalMenu/docs/demo.html","<div style=\"height: 200px;\">\n    <div data-ng-controller=\"HierarchicalMenuDemoController\">\n        <hierarchical-menu menu=\"menu\"></hierarchical-menu>\n    </div>\n    <div class=\"clearfix\"></div>\n</div>");
$templateCache.put("/library/simpleDialog/docs/demo.html","<script type=\"text/ng-template\" id=\"confirm-content-template\">\n    <p>That you now the result of this equation?</p>\n    <label>2 + 2 = </label><input ng-model=\"parameter.value\" min=\"0\" max=\"99\" required ng-change=\"isValid()\"/>\n    <span ng-if=\"parameter.invalid\" class=\"label label-danger\">This can not be true!</span>\n</script>\n\n<div data-ng-controller=\"ConfirmDialogDemoController\">\n    Test a dialog here: <button class=\"btn btn-default\" ng-click=\"openDialog()\">Open dialog</button>\n</div>");
$templateCache.put("/library/treeNavigator/docs/demo.html","<div data-ng-controller=\"TreeNavigatorDemoController\" style=\"height: 600px; overflow-x:auto;\">\n    <tree-navigator tree-data=\"treeData\" config=\"config\"></tree-navigator></div>\n</div>");
$templateCache.put("/library/contextmenu/docs/readme.md","`isisContextmenu` is a directive for displaying contextual-menu-like call-outs. Attach it as an attribute on triggering object.\n\nUse the following attributes along:\n\n * `contextmenuConfig` - {object} configuration options:\n    - `triggerEvent` - {string} the DOM event triggering appearance\n    - `contentTemplateUrl` - {string} url of template for content (should be cached already). Uses a `hierarchical-menu` as default.\n    - `position` - {string} mouse coordinates by default but with this option you can override menu position to `\'left bottom\'` or `\'right bottom\'` of triggering element\n * `contextmenuData` - {object} data passed to shell directive in template. By default, specify a menu structure for `hierarchical-menu`.\n * `contextmenu-disabled` - {function} if set, will be evaluated before showing menu\n * `contextmenu` - {function} callback function called before menu is instantiated\n\nIt also registers the `contextmenuService` for opening and closing menus manually. Exposed methods:\n\n * `open` with arguments:\n    - triggerElement, contentTemplateUrl, aScope, position, doNotAutocloseOnClick\n * `close` - no arguments");
$templateCache.put("/library/dropdownNavigator/docs/readme.md","`dropdownNavigator` is a directive to visualize a vertical, multi-hierarchical navigator.\n\nIt uses `hierarchicalMenu` components for its items\' submenus. Consult demo.js in source for configuration options.");
$templateCache.put("/library/hierarchicalMenu/docs/readme.md","`hierarchicalMenu` is a directive for creating hierarchical menus.\n\nSee `dropdownMenu` structure in demo.js in source for configuration options.");
$templateCache.put("/library/isis-ui-filter-input/docs/readme.md","`filterInput` is a directive built on ngTagsInput for working as a filter-control");
$templateCache.put("/library/itemList/docs/readme.md","`itemList` renders content as a list-group with extra options. Depends on `ngTagsInput`.");
$templateCache.put("/library/simpleDialog/docs/readme.md","`simpleDialog` is a service for quick creation of confirm dialogs. It is a wrapper around [Bootstrap modals](http://angular-ui.github.io/bootstrap)\nand inherits all of its options.\n\nThe dialog creation is invoked through the `open(options)` method.\n\n`simpleDialog`-specific options are:\n\n * `dialogTitle`\n * `dialogContentTemplate` - the body of the dialog. Url or id of Angular-template (eg. if preloaded)\n * `onOk` - callback on OK\n * `onCancel` - callback on Cancel\n * `validator` - a function, if set, invoked when OK is clicked. Needs to return `true` to close dialog and result OK.\n\n`controller` and `template` are used internally. Do not set in options unless you would like to extend default functionality.");
$templateCache.put("/library/treeNavigator/docs/readme.md","`treeNavigator` is a tree component directive. It needs the following attributes:\n\n__`treeData`__ - Data to render in a recursive structure with the following node-schema:\n\n  * `label`: {string} label,\n  * `extraInfo`: {string} any extra info to display after label,\n  * `children`: {array} array of children after __children got loaded__,\n  * `childrenCount`: {int} indicates the number of children (0 if none),\n  * `nodeData`: {object} arbitrary data object,\n  * `iconClass`: {string} css classes for setting the node icon,\n  * `draggable`: {boolean} if node is draggable,\n  * `dragChannel`: {string} in which channel dragging happens,\n  * `dropChannel`: {string} from which channel should accept drops,\n  * `collapsedIconClass`: {string} to overwrite global setting,\n  * `expandedIconClass`: {string} to overwrite global setting,\n  * `unCollapsible`: {boolean} if true, node can not collapse.\n\n__`config`__ - Object with options and tree state.\n\nHeader options:\n\n   * `scopeMenu`: {array} a `hierarchical-menu`-structure to render as scope menu. User has to take care of\n   handling actions and any kind of reconfigurations when an item is clicked,\n   * `preferencesMenu`: {array} another `hierarchical-menu`-structure for the preferences menu (gear icon).\n\nIf `scopeMenu` or `preferencesMenu` is not set, header is not displayed.\n\nRendering options:\n\n   * `collapsedIconClass`: {string} default: \'icon-arrow-right\',\n   * `expandedIconClass`: {string} default: \'icon-arrow-down\',\n   * `folderIconClass`: {string} if set, this icon will decorate nodes with children,\n   * `showRootLabel`: {boolean} if root node should get displayed. False by default.\n\nEvent callbacks:\n\n   * `nodeClick`: {function(event, node)},\n   * `nodeDblclick`: {function(event, node)},\n   * `nodeContextmenuRenderer`: {function(event, node)},\n   * `nodeExpanderClick`: {function(event, node, isExpand)},\n   * `loadChildren`: {function(event, node)}.\n\nTree state:\n\n   * `activeNode`: {string} id of active node,\n   * `selectedNodes`: {array} of node ids,\n   * `expandedNodes`: {array} of node ids\n   * `activeScope`: {string} id of active scope");}]);